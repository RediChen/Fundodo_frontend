import scss from './pid.module.scss';
import Head from 'next/head';
import DefaultLayout from '@/components/layout/default';
import Breadcrumb from '../list/breadcrumb';
import { useRouter } from 'next/router';
import { useState, useEffect } from 'react';
import Image from 'next/image';
import { NumberPanel } from '@/components/buttons/NumberPanel';
import Recommend from './recommend';
import FavoriteIcon from '../list/favoriteIcon';
import ProductImages from './productImages';

export default function Pid() {
  const router = useRouter();
  const [selectedSort, setSelectedSort] = useState("");
  const [selectedSpec, setSelectedSpec] = useState("");
  const [selectedPrice, setSelectedPrice] = useState(null);

  const [product, setProduct] = useState({
    id: 0,
    name: "",
    picNameArr: [],
    desc: "",
    priceArr: [],
    sortArr: [],
    specArr: []
  });

  const getProduct = async (id) => {
    const URL = `http://localhost:3005/api/prod/${id}`;
    try {
      const res = await fetch(URL);
      const data = await res.json();
      const productData = data.product;
      setProduct({
        ...productData,
        priceMap: productData.priceMap || []
      });
      // 自动选择排列组合
      autoSelectOptions(productData);
    } catch (error) {
      console.error('Failed to fetch product data:', error);
    }
  };

  const autoSelectOptions = (productData) => {
    let sort = "";
    let spec = "";

    if (productData.sortArr.length === 1) {
      sort = productData.sortArr[0];
    }
    if (productData.specArr.length === 1) {
      spec = productData.specArr[0];
    }

    setSelectedSort(sort);
    setSelectedSpec(spec);

    // 延迟调用 updatePrice 以确保状态更新完成
    setTimeout(() => {
      updatePrice(sort, spec);
    }, 0);
  };

  const handleSortChange = ({ target: { value } }) => {
    setSelectedSort(value);
    updatePrice(value, selectedSpec);
  };

  const handleSpecChange = ({ target: { value } }) => {
    setSelectedSpec(value);
    updatePrice(selectedSort, value);
  };

  const updatePrice = (sort, spec) => {
    let price = null;
  
    // Check if priceMap exists and is not empty
    if (product.priceMap && product.priceMap.length > 0) {
      if (sort && spec) {
        // Check if both sort and spec are selected
        price = product.priceMap.find(priceItem =>
          priceItem.sort === sort && priceItem.spec === spec
        );
      } else if (sort) {
        // Check if only sort is selected
        price = product.priceMap.find(priceItem =>
          priceItem.sort === sort
        );
      } else if (spec) {
        // Check if only spec is selected
        price = product.priceMap.find(priceItem =>
          priceItem.spec === spec
        );
      } else {
        // Default to the first price if no sort or spec is selected
        price = product.priceMap[0];
      }
    }
  
    // Fallback to priceArr if priceMap is not available
    if (!price && product.priceArr && product.priceArr.length > 0) {
      // Use the first price from priceArr if available
      price = { value: product.priceArr[0] };
    }
  
    // Ensure there's always a price displayed
    setSelectedPrice(price ? `NT$${price.value}` : '請選擇有效的類別和規格');
  };

  useEffect(() => {
    if (router.isReady && router.query.pid) {
      getProduct(router.query.pid);
    }
  }, [router.isReady, router.query.pid]);

  return (
    <>
      <Head>
        <title>Pid</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className='container'>
        <h1 className={[scss.shade3, 'd-none', 'd-lg-block'].join(' ')}>狗的飼料</h1>
        <div className='mt-3'>
          <Breadcrumb />
        </div>
        <div>
          <div className={[scss.detailGroup, 'row'].join(' ')}>
            <div className={['col-lg-6', 'col-12'].join(' ')}>
              <ProductImages picNameArr={product.picNameArr} />
            </div>
            <div className='col-lg-6 col-12'>
              <div className={scss.headerGrid}>
                <h3 className={scss.header}>{product.name}</h3>
                <FavoriteIcon className={scss.handleFavIcon} size={24} style={{ color: '#B9A399' }} />
              </div>
              <hr className='bg-primary' />
              <div className={scss.btnGroup}>
                {product.sortArr && product.sortArr.length > 0 && (
                  <>
                    <p className={['text-nowrap', scss.p].join(' ')}>類別</p>
                    <div className='d-flex gap-3 flex-wrap'>
                      {product.sortArr.map((sort, i) => (
                        <label
                          key={i}
                          className={`${scss.radio} ${selectedSort === sort ? scss.selected : ''}`}
                        >
                          <input
                            type="radio"
                            value={sort}
                            checked={selectedSort === sort}
                            onChange={handleSortChange}
                            className={scss.hidden}
                          />
                          <span>{sort}</span>
                        </label>
                      ))}
                    </div>
                  </>
                )}
              </div>
              <div className={scss.btnGroup}>
                {product.specArr && product.specArr.length > 0 && (
                  <>
                    <p className={['text-nowrap', scss.p].join(' ')}>規格</p>
                    <div className='d-flex gap-3 flex-wrap'>
                      {product.specArr.map((spec, i) => (
                        <label
                          key={i}
                          className={`${scss.radio} ${selectedSpec === spec ? scss.selected : ''}`}
                        >
                          <input
                            type="radio"
                            value={spec}
                            checked={selectedSpec === spec}
                            onChange={handleSpecChange}
                            className={scss.hidden}
                          />
                          <span>{spec}</span>
                        </label>
                      ))}
                    </div>
                  </>
                )}
              </div>
              <hr className={[scss.mt, 'bg-primary'].join(' ')} />
              <div className={scss.priceGroup}>
                <span className={scss.price}>
                  {selectedPrice !== null ? selectedPrice : '請選擇規格和類別'}
                </span>
              </div>
              <div className={['gap-3', 'd-flex', scss.mt].join(' ')}>
                <span className={[scss.cs3, 'd-none', 'd-lg-block'].join(' ')}>數量</span>
                <NumberPanel className={scss.NumberPanel} quantity={0} />
                <div className={scss.fixed}>
                  <button className={scss.btnSubmit} type='submit'>加入購物車</button>
                  <FavoriteIcon className={scss.mbFavIcon} size={28} />
                </div>
              </div>
            </div>
          </div>
          <Recommend />
        </div>
      </main>
    </>
  );
}

Pid.layout = DefaultLayout;
