@use 'sass:color';
$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
) !default;
//================================================================
@function divide($dividend, $divisor, $precision: 10) {
  $sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);
  $dividend: abs($dividend);//abs() 為 SASS 內建
  $divisor: abs($divisor);
  @if $dividend == 0 {
    @return 0;
  }
  @if $divisor == 0 {
    @error "不可以除以 0";
  }
  $remainder: $dividend;
  $result: 0;
  $factor: 10;
  @while ($remainder > 0 and $precision >= 0) {
    $quotient: 0;
    @while ($remainder >= $divisor) {
      $remainder: $remainder - $divisor;
      $quotient: $quotient + 1;
    }
    $result: $result * 10 + $quotient;
    $factor: $factor * .1;
    $remainder: $remainder * 10;
    $precision: $precision - 1;
    @if ($precision < 0 and $remainder >= $divisor * 5) {
      $result: $result + 1;
    }
  }
  $result: $result * $factor * $sign;
  $dividend-unit: unit($dividend);//unit() 為 SASS 內建
  $divisor-unit: unit($divisor);
  $unit-map: (
    "px": 1px,
    "rem": 1rem,
    "em": 1em,
    "%": 1%
  );
  @if ($dividend-unit != $divisor-unit and map-has-key($unit-map, $dividend-unit)) {
    $result: $result * map-get($unit-map, $dividend-unit);
  }
  @return $result;
}
//===============================================================
//內部用：尋找下一個 tag 名
// 例：breakpoint-next(sm)->md
@function breakpoint-next($name, $breakpoint-names: map-keys($grid-breakpoints)) {
  $n: index($breakpoint-names, $name);
  @if not $n {
    @error "breakpoint `#{$name}` not found in `#{$grid-breakpoints}`";
  }
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// 內部用：取裝置寬度區間的最小值
// 例：breakpoint-min(sm) -> 576px
@function breakpoint-min($name) {
  $min: map-get($grid-breakpoints, $name);
  @return if($min != 0, $min, null);
}

// 內部用：取裝置寬度區間的最大值
// 預設為下一個斷點扣掉 0.02px
// 此數據為了避免 CSS `min-` and `max-` 的
// 以及 Safari 的 bug

// 例：breakpoint-max(md) -> 767.98px
@function breakpoint-max($name) {
  $max: map-get($grid-breakpoints, $name);
  @return if($max and $max > 0, $max - .02, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
// 例：breakpoint-infix(xs)
//    ""  (Returns a blank string)
// 例：breakpoint-infix(sm)
//    "-sm"
// _container.scss 有用到
@function breakpoint-infix($name) {
  @return if(breakpoint-min($name) == null, "", "_#{$name}");
}

//* API：設定界線以上的 media screen
// 例：rwd-above(sm) -> 576px 以上
// 原名 media-breakpoint-up
@mixin rwd-above($name) {
  $min: breakpoint-min($name);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

//* API：設定界線以下的 media screen
// 例：rwd-below(md) -> 767.98px 以下
// 原名 media-breakpoint-down
@mixin rwd-below($name) {
  $max: breakpoint-max($name);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

//* API：設定指定兩個界線以內的 media screen
// 例：rwd-between(md, xl) -> 768px ~ 1199.98px
// 原名 media-breakpoint-between
@mixin rwd-between($lower, $upper) {
  $min: breakpoint-min($lower);
  $max: breakpoint-max($upper);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include rwd-above($lower) {
      @content;
    }
  } @else if $min == null {
    @include rwd-below($upper) {
      @content;
    }
  }
}

//* API：設定指定段點以上段點區間的 media screen
// 例：rwd-only(md) -> 768px ~ 991.98px
// 原名 media-breakpoint-only
@mixin rwd-only($name) {
  $min:  breakpoint-min($name, $grid-breakpoints);
  $next: breakpoint-next($name, $grid-breakpoints);
  $max:  breakpoint-max($next, $grid-breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include rwd-above($name, $grid-breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include rwd-below($next, $grid-breakpoints) {
      @content;
    }
  }
}
//===============================================================
// Grid columns
//
// Set the number of columns and specify the width of the gutters.

$grid-columns:                12 !default;
$grid-gutter-width:           1.5rem !default;
$grid-row-columns:            6 !default;

$spacer: 1rem !default;
$spacers: (
  0: 0,
  1: $spacer * .25,
  2: $spacer * .5,
  3: $spacer,
  4: $spacer * 1.5,
  5: $spacer * 3,
) !default;
$gutters: $spacers !default;
//================================================================

@mixin make-row($gutter: $grid-gutter-width) {
  --gutter-x: #{$gutter};
  --gutter-y: 0;
  display: flex;
  flex-wrap: wrap;
  margin-top: calc(-1 * var(--gutter-y)); // stylelint-disable-line function-disallowed-list
  margin-right: calc(-.5 * var(--gutter-x)); // stylelint-disable-line function-disallowed-list
  margin-left: calc(-.5 * var(--gutter-x)); // stylelint-disable-line function-disallowed-list
}

@mixin make-col-ready() {
  // Add box sizing if only the grid is loaded
  box-sizing: if(variable-exists(include-column-box-sizing) and $include-column-box-sizing, border-box, null);
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we set the width
  // later on to override this initial width.
  flex-shrink: 0;
  width: 100%;
  max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid
  padding-right: calc(var(--gutter-x) * .5); // stylelint-disable-line function-disallowed-list
  padding-left: calc(var(--gutter-x) * .5); // stylelint-disable-line function-disallowed-list
  margin-top: var(--gutter-y);
}

@mixin make-col($size: false, $columns: $grid-columns) {
  @if $size {
    flex: 0 0 auto;
    width: percentage(divide($size, $columns));

  } @else {
    flex: 1 1 0;
    max-width: 100%;
  }
}

@mixin make-col-auto() {
  flex: 0 0 auto;
  width: auto;
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: divide($size, $columns);
  margin-left: if($num == 0, 0, percentage($num));
}

// Row
//
// Rows contain your columns.
.row {
  @include make-row();

  > * {
    @include make-col-ready();
  }
}

// Row columns
//
// Specify on a parent element(e.g., .row) to force immediate children into NN
// number of columns. Supports wrapping to new lines, but does not do a Masonry
// style grid.
@mixin row-cols($count) {
  > * {
    flex: 0 0 auto;
    width: percentage(divide(1, $count));
  }
}

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width) {
  @each $breakpoint in map-keys($grid-breakpoints) {
    $infix: breakpoint-infix($breakpoint);

    @include rwd-above($breakpoint) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
      }

      .rowCols#{$infix}Auto > * {
        @include make-col-auto();
      }

      @if $grid-row-columns > 0 {
        @for $i from 3 through $grid-row-columns {
          .rowCols#{$infix}#{$i} {
            @include row-cols($i);
          }
        }
      }

      .col#{$infix}Auto {
        @include make-col-auto();
      }

      @if $columns > 0 {
        @for $i from 1 through $columns {
          .col#{$infix}#{$i} {
            @include make-col($i, $columns);
          }
        }

        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns - 1) {
          @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
            .offset#{$infix}#{$i} {
              @include make-col-offset($i, $columns);
            }
          }
        }
      }

      // Gutters
      //
      // Make use of `.g-*`, `.gx-*` or `.gy-*` utilities to change spacing between the columns.
      @each $key, $value in $gutters {
        .g#{$infix}#{$key},
        .gx#{$infix}#{$key} {
          --gutter-x: #{$value};
        }

        .g#{$infix}#{$key},
        .gy#{$infix}#{$key} {
          --gutter-y: #{$value};
        }
      }
    }
  }
}

//*=========執行==========
.row {
  @include make-row();

  > * {
    @include make-col-ready();
  }
}
@include make-grid-columns();
//================================================================
$white:    hsl(0, 0%, 100%);
$gray-100: hsl(19, 2%, 98%);
$gray-200: hsl(19, 2%, 93%);
$gray-300: hsl(19, 2%, 89%);
$gray-400: hsl(19, 2%, 83%);
$gray-500: hsl(19, 2%, 71%);
$gray-600: hsl(19, 2%, 46%);
$gray-700: hsl(19, 2%, 31%);
$gray-800: hsl(19, 2%, 23%);
$gray-900: hsl(19, 2%, 15%);
$black:    hsl(0, 0%, 0%);

$primary: #B9A399;// hsl(19, 19%, 66%)
$secondary: #E7E1DB;// hsl(30, 20%, 88%)
$warning: #FBC02D; // hsl(43, 96%, 58%)
$error: #E53835; // hsl(1, 77%, 55%)
$light: #F1EDEB; // hsl(45, 29%, 97%)
$info: #71c4ef; // hsl(200, 80%, 69%)
$dark: #2a2522; // hsl(19, 11%, 15%);

$theme-colors: (
  "primary":    $primary,
  "secondary":  $secondary,
  // "success":    $success,
  "info":       $info,
  "warning":    $warning,
  // "danger":     $danger,
  "error":      $error,
  "light":      $light,
  "dark":       $dark
);

$theme-colors-capital: (
  "Primary":    $primary,
  "Secondary":  $secondary,
  "Info":       $info,
  "Warning":    $warning,
  "Error":      $error,
  "Light":      $light,
  "Dark":       $dark
);

/* text color 灰階 */
$color-heading: $gray-800;
$color-body: $gray-600;
$color-muted: $gray-400;

/* text color 帶色 */
$primary-text: #49352c;//hsl(19, 25%, 23%)
$info-text: hsl(200, 25%, 23%);
$error-text: hsl(1, 25%, 23%);

/* color shade */
$color-shade-1: #857A79;//hsl(5, 5%, 50%)
$color-shade-2: #6F625C;//hsl(19, 9%, 40%)
$color-shade-3: #5D524D;//hsl(19, 9%, 33%)
$color-shade-4: #37312E;//hsl(20, 9%, 20%)
$color-shade-5: hsl(20, 9%, 8%);

/* color shade */
$color-tint-1: #C0ACA3;
$color-tint-2: #CEBFB8;
$color-tint-3: #DCD1CC;
$color-tint-4: #EAE3E0;
$color-tint-5: #F1EDEB;//also theme-light

@each $color, $value in $theme-colors-capital {
	//文字
	.tx#{$color} {
		color: $value;
	}
	//背景
	.bg#{$color} {
		background-color: $value;
	}
}
//================================================================
//mix($color-1, $color-2, $weight: 50%) 是 SASS 內建的函數
//color 可以是顏色的任何的格式

//================= 顏色微調函數

//* API：淡化顏色: 用白色以指定比例混合
@function tint-color($color, $weight) {
  @return mix(white, $color, $weight);
}

//* API：深化顏色: 用黑色以指定比例混合
@function shade-color($color, $weight) {
  @return mix(black, $color, $weight);
}

//* API：顏色深化、淡化兩功能二合一
// 正數為調深（重），負數為調淺（輕）
@function shift-color($color, $weight) {
  @return if($weight > 0, shade-color($color, $weight), tint-color($color, -$weight));
}
//================= 顏色微調函數 END


//================= 顏色微調函數
// 此函數為 Bootstrap 依據 Web內容無障礙指南設計的選色函數
// 當不確定文字色在背景色中適合與否，
// 此函數會根據前述的指南幫你檢查；
// 如果不給過，也會提供黑、白色作為替代選項。

// A list of pre-calculated numbers of pow(divide((divide($value, 255) + .055), 1.055), 2.4). (from 0 to 255)
// stylelint-disable-next-line scss/dollar-variable-default, scss/dollar-variable-pattern
$_luminance-list: .0008 .001 .0011 .0013 .0015 .0017 .002 .0022 .0025 .0027 .003 .0033 .0037 .004 .0044 .0048 .0052 .0056 .006 .0065 .007 .0075 .008 .0086 .0091 .0097 .0103 .011 .0116 .0123 .013 .0137 .0144 .0152 .016 .0168 .0176 .0185 .0194 .0203 .0212 .0222 .0232 .0242 .0252 .0262 .0273 .0284 .0296 .0307 .0319 .0331 .0343 .0356 .0369 .0382 .0395 .0409 .0423 .0437 .0452 .0467 .0482 .0497 .0513 .0529 .0545 .0561 .0578 .0595 .0612 .063 .0648 .0666 .0685 .0704 .0723 .0742 .0762 .0782 .0802 .0823 .0844 .0865 .0887 .0908 .0931 .0953 .0976 .0999 .1022 .1046 .107 .1095 .1119 .1144 .117 .1195 .1221 .1248 .1274 .1301 .1329 .1356 .1384 .1413 .1441 .147 .15 .1529 .1559 .159 .162 .1651 .1683 .1714 .1746 .1779 .1812 .1845 .1878 .1912 .1946 .1981 .2016 .2051 .2086 .2122 .2159 .2195 .2232 .227 .2307 .2346 .2384 .2423 .2462 .2502 .2542 .2582 .2623 .2664 .2705 .2747 .2789 .2831 .2874 .2918 .2961 .3005 .305 .3095 .314 .3185 .3231 .3278 .3325 .3372 .3419 .3467 .3515 .3564 .3613 .3663 .3712 .3763 .3813 .3864 .3916 .3968 .402 .4072 .4125 .4179 .4233 .4287 .4342 .4397 .4452 .4508 .4564 .4621 .4678 .4735 .4793 .4851 .491 .4969 .5029 .5089 .5149 .521 .5271 .5333 .5395 .5457 .552 .5583 .5647 .5711 .5776 .5841 .5906 .5972 .6038 .6105 .6172 .624 .6308 .6376 .6445 .6514 .6584 .6654 .6724 .6795 .6867 .6939 .7011 .7084 .7157 .7231 .7305 .7379 .7454 .7529 .7605 .7682 .7758 .7835 .7913 .7991 .807 .8148 .8228 .8308 .8388 .8469 .855 .8632 .8714 .8796 .8879 .8963 .9047 .9131 .9216 .9301 .9387 .9473 .956 .9647 .9734 .9823 .9911 1;

//對比色替代選項的預設值
$color-contrast-dark:      $black !default;
$color-contrast-light:     $white !default;
// 根據 Web內容無障礙指南設計 2.0 設定的對比度門檻
$min-contrast-ratio:   4.5 !default;

//* API：顏色對比度檢查器
@function color-contrast(
  $background,
  $color-contrast-dark: $color-contrast-dark,
  $color-contrast-light: $color-contrast-light,
  $min-contrast-ratio: $min-contrast-ratio
  ) {
  $foregrounds: $color-contrast-light, $color-contrast-dark, $white, $black;
  $max-ratio: 0;
  $max-ratio-color: null;

  @each $color in $foregrounds {
    $contrast-ratio: contrast-ratio($background, $color);
    @if $contrast-ratio > $min-contrast-ratio {
      @return $color;
    } @else if $contrast-ratio > $max-ratio {
      $max-ratio: $contrast-ratio;
      $max-ratio-color: $color;
    }
  }

  @warn "找不到與 #{$background} 之對比度符合 #{$min-contrast-ratio}:1 的顏色。";

  @return $max-ratio-color;
}

// Return opaque color
// opaque(#fff, rgba(0, 0, 0, .5)) => #808080
@function opaque($background, $foreground) {
  @return mix(rgba($foreground, 1), $background, opacity($foreground) * 100%);
}

@function contrast-ratio($background, $foreground: $color-contrast-light) {
  $l1: luminance($background);
  $l2: luminance(opaque($background, $foreground));

  @return if($l1 > $l2, divide($l1 + .05, $l2 + .05), divide($l2 + .05, $l1 + .05));
}

// Return WCAG2.1 relative luminance
@function luminance($color) {
  $rgb: (
    "r": red($color),
    "g": green($color),
    "b": blue($color)
  );

  @each $name, $value in $rgb {
    $value: if(divide($value, 255) < .04045, divide(divide($value, 255), 12.92), nth($_luminance-list, $value + 1));
    $rgb: map-merge($rgb, ($name: $value));
  }

  @return (map-get($rgb, "r") * .2126) + (map-get($rgb, "g") * .7152) + (map-get($rgb, "b") * .0722);
}
//================= 顏色微調函數 END
//================================================================
@mixin font-size($size1, $size2: 0, $size3: 0) {
	@if ($size1 == 0) {
    @warn "font-size 不可設定為 0。";
  }
  font-size: $size1;

		@if ($size2 != 0) {
			@if ($size3 == 0) {
				@include rwd-above("lg") {
					font-size: $size2;
				}
			} @else {
				@include rwd-above("sm") {
					font-size: $size2;
				}
				@include rwd-above("lg") {
					font-size: $size3;
				}
			}
		}
}

// @mixin ff-roboto($fz: 0, $fz-sm: 0, $fz-lg: 0) {
// 	font-family: "Roboto", sans;
// 	@include font-size($fz, $fz-sm, $fz-lg);
// }

@mixin ff-noto($fz: 0, $fz-sm: 0, $fz-lg: 0) {
	font-family: "Noto Sans TC", sans;
	@include font-size($fz, $fz-sm, $fz-lg);
}

@mixin ff-maru($fz: 0, $fz-sm: 0, $fz-lg: 0) {
	font-family: "Zen Maru Gothic", sans-serif;
	@include font-size($fz, $fz-sm, $fz-lg);
  }
//================================================================
.imgWrap {
  // overflow: hidden;
  height: fit-content;
	img {
		width: 100%;
    height: 100%;
		object-fit: cover;
	}
}

.fxCenter {
	display: flex;
	justify-content: center;
	align-items: center;
}

.grCenter {
  display: grid;
  place-items: center;
}

.hstack {
  display: flex;
  flex-direction: row;
  align-items: center;
}
.vstack {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.dFlex{
  display: flex;
}

//================================================================
@mixin circle-of($radius) {
  width: $radius;
  height: $radius;
  border-radius: 50%;
}
//================================================================
$container-padding-x: $grid-gutter-width !default;

@mixin make-container($gutter: $container-padding-x) {
  --gutter-x: #{$gutter};
  --gutter-y: 0;
  width: 100%;
  padding-right: calc(var(--gutter-x) * .5); // stylelint-disable-line function-disallowed-list
  padding-left: calc(var(--gutter-x) * .5); // stylelint-disable-line function-disallowed-list
  margin-right: auto;
  margin-left: auto;
}

.container,
.container-fluid {
  @include make-container();
}

$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1320px
) !default;

// Responsive containers that are 100% wide until a breakpoint
@each $breakpoint, $container-max-width in $container-max-widths {
  .container-#{$breakpoint} {
    @extend .container-fluid;
  }

  @include rwd-above($breakpoint) {
    %responsive-container-#{$breakpoint} {
      max-width: $container-max-width;
    }

    // Extend each breakpoint which is smaller or equal to the current breakpoint
    $extend-breakpoint: true;

    @each $name, $width in $grid-breakpoints {
      @if ($extend-breakpoint) {
        .container#{breakpoint-infix($name)} {
          @extend %responsive-container-#{$breakpoint};
        }

        // Once the current breakpoint is reached, stop extending
        @if ($breakpoint == $name) {
          $extend-breakpoint: false;
        }
      }
    }
  }
}
//================================================================
